<section class="hero is-primary">
  <div class="hero-body">
    <div class="columns">
      <div class="column is-12">
        <div class="container content">
          <h1 class="title">Welcome to the Smokex documentation</h1>
          <h3 class="subtitle">
            Here you can find a collection of example code goodies to create
            your workflows
          </h3>
        </div>
      </div>
    </div>
  </div>
</section>

<section class="section cheatsheet" id=cheatsheet" phx-hook="LoadPrismjs">
  <div class="container">
    <div class="columns">
      <div class="column is-3">
        <aside class="is-medium menu">
          <p class="menu-label">
          categories
          </p>
          <ul class="menu-list">
            <li><a href="#overview" class="is-active">Overview</a></li>
            <li><a href="#http-requests" class="is-active">HTTP requests</a></li>
            <li><a href="#request-options" class="is-active">Request options</a></li>
            <li><a href="#expects" class="is-active">Expects</a></li>
            <li><a href="#variables" class="is-active">Variables</a></li>
          </ul>
        </aside>
      </div>

      <div class="column is-9">
        <div class="content is-medium mb-6">
          <h2 id="overview" class="title is-2">Overview</h2>

          <h3 class="title is-4">Smokex overview</h3>

          <p>Smokex provide a quick and easy way to create and automate HTTP
          requests to create smoke tests. These smoke tests can be used to validate
          deployment of a release, uptime, etc...</p>

          <h3 class="title is-4">Main concepts</h3>

          <p>A <strong>workflow</strong> is a YAML content that defines a set
          of configured requests. Those requests will be executed either
          manually or automatically using a cron sentence.</p>

          <p>A workflow supports <strong>asserting</strong> data from the
          responses of the requests and storing information in variables for
          further use.</p>

          <p>Each <strong>execution</strong> sends the requests of a workflow
          and asserts the response using the defined specs.</p>

          <p>It is possible to save data from a response into
          <strong>variables</strong> and reuse it on other requests. This is
          handy if you want to call an authentication endpoint and use the
          session token in subsequent requests.</p>

          <h3 class="title is-4">Help us to be better</h3>

          <p>We keep improving Smokex and this documentation so if you have any
          feedback, got an idea, have any problem or suggestion you can contact
          us by <a href="mailto:contact@smokex.io?subject=Documentation feedback">email</a>
                   or using <a href="https://airtable.com/shrHMbYacikW8eGFI"
                     target="_blank">this form</a>.</p>
        </div>

        <hr class="my-6">

        <div class="content is-medium">
          <h2 id="overview" class="title is-2">Examples</h2>

          <h3 id="http-requests" class="title is-3">HTTP requests</h3>

          <article class="message is-primary">
            <div class="message-body">
              To make an HTTP request, just specify any valid HTTP method and a
              target host.
            </div>
          </article>

          <div class="box">
            <h4 class="title is-4">Simple request</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "https://smokex.io"</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Headers</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "https://smokex.io"
    headers:
      content-type: "application/json"</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Query params</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "https://smokex.io"
    query:
      search: "my-query-search"
      filter: "all"</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Adding a request body</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- post:
    host: "https://smokex.io"
    body:
      name: "Michael"
      last-name: "Jordan"
      number: 23</span></code></pre>
          </div>

          <h3 id="request-options" class="title is-3">Request options</h3>

          <article class="message is-primary">
            <div class="message-body">
              The following request options are available:

              <ul>
                <li>
                  The <strong>timeout</strong> of a step to receive a response, in milliseconds. Defaults to <i>5000</i>.
                </li>
                <li>
                  Number of request <strong>retries</strong>, in case of connection failures (timeouts, connection closed, etc...) until the timeout limit. Defaults to <i>0</i>.
                </li>
                <li>Whether <strong>follow redirections</strong> from a server response. The expectations will be made against the final response. Defaults to <i>false</i>.
                </li>
              </ul>
            </div>
          </article>


          <div class="box">
            <h4 class="title is-4">Set a request timeout</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "https://smokex.io"
    options:
      timeout: 2000</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Retry a failed request connection</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "https://smokex.io"
    options:
      retries: 5</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Follow server redirections</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "http://smokex.io"
    options:
      follow_redirects: true</span></code></pre>
          </div>

          <h3 id="expects" class="title is-3">Expects</h3>

          <article class="message is-primary">
            <div class="message-body">
              By default all request will match by default a <strong>HTTP/200</strong>
              response code, but more assertions can be defined.
            </div>
          </article>

          <div class="box">
            <h4 class="title is-4">Status code</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- post:
    host: "https://smokex.io"
    body:
      name: "Michael"
      last-name: "Jordan"
      number: 23
    expect:
      status_code: 200</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Headers</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- post:
    host: "https://smokex.io"
    body:
      name: "Michael"
      last-name: "Jordan"
      number: 23
    expect:
      headers:
        content-type: "application/json"</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Response body as JSON</h4>
            <article class="message is-primary">
              <div class="message-body">
                Expect the body response to be a valid <strong>JSON</strong>
                and contain the given structure.
              </div>
            </article>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "https://smokex.io"
    query:
      id: 23
    expect:
      json:
        available: true
        status: "healthy"
        stats:
          points: 734
          rebounds: 458</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Response body as string</h4>
            <article class="message is-primary">
              <div class="message-body">
                Expect the body response to be a <strong>string</strong> and
                contain the given text.
              </div>
            </article>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "https://smokex.io"
    query:
      id: 23
    expect:
      string: "{ \"available\": true, \"status\": \"healthy\", \"stats\": { \"points\": 723, \"rebounds\": 458 } }"</span></code></pre>
          </div>

          <div class="box">
            <h4 class="title is-4">Response body HTML</h4>
            <article class="message is-primary">
              <div class="message-body">
                Expect the body response to be a valid <strong>HTML</strong> and
                equal the given CSS paths and its expected text.
              </div>
            </article>
            <pre phx-update="ignore"><code class="language-yaml"><span>- get:
    host: "https://smokex.io"
    query:
      id: 23
    expect:
      html:
        - path: "a.button:nth-child(2)"
          equal: "Sign up"
        - path: "ul.is-size-7:nth-child(2) > li:nth-child(5) > a:nth-child(1)"
          equal: "Blog"</span></code></pre>
          </div>

          <h3 id="variables" class="title is-3">Variables</h3>

          <article class="message is-primary">
            <div class="message-body">
              You can reuse data from a response by <strong>creating
                variables</strong> that can be used in further tests. To do so,
              define a variable name and a <strong>JSON path</strong> where
              retrieve the data from.
            </div>
          </article>

          <div class="box">
            <h4 class="title is-4">Save data from response</h4>
            <pre phx-update="ignore"><code class="language-yaml"><span>- post:
    host: "https://smokex.io"
    body:
      name: "Michael"
      last-name: "Jordan"
      number: 23
    save_from_response:
      - variable_name: "current_points"
        json_path: "stats.points"

  - put:
    host: "https://smokex.io/players/23"
    body:
      points: ${current_points}</span></code></pre>
          </div>

        </div>
      </div>
    </div>
  </div>
</section>
